swagger: "2.0"
info:
  version: "1.0"
  title: API
basePath: /
tags:
- name: orders
  description: Order related operations
consumes:
- application/json
produces:
- application/json
paths:
  /orders/:
    get:
      tags:
      - orders
      summary: Handles the HTTP GET request to retrieve orders by status
      description: |-
        This method performs the following steps:
        1. Parses the 'status' parameter from the request.
        2. Retrieves orders with the specified status from the database.
        3. Returns the list of orders.
        Returns:
            list: A list of orders with the specified status.
        Raises:
            werkzeug.exceptions.HTTPException: If the 'status' parameter is missing or invalid.
      operationId: get_order_list
      parameters:
      - name: status
        in: query
        description: The status of the orders to retrieve
        required: false
        type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        required: false
        type: string
        format: mask
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
    post:
      tags:
      - orders
      summary: Handles the HTTP POST request to create a new order
      description: |-
        This method performs the following steps:
        1. Parses the JSON data from the request.
        2. Validates the presence and format of required fields.
        3. Ensures no additional fields are present in the request.
        4. Validates the structure of the 'items' and 'deliveryAddress' fields.
        5. Generates a unique orderId for the new order.
        6. Inserts the new order data into the database.
        7. Retrieves and returns the newly created order.
        Returns:
            tuple: A tuple containing the newly created order data and the HTTP status code 201.
        Raises:
            werkzeug.exceptions.HTTPException: If the JSON data is invalid, required fields are missing,
                               additional fields are present, or email addresses already exist.
      operationId: post_order_list
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/Order'
      - name: X-Fields
        in: header
        description: An optional fields mask
        required: false
        type: string
        format: mask
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/Order'
  /orders/{id}/details:
    put:
      tags:
      - orders
      summary: Update the emails or delivery address of an existing order based on the provided order ID
      description: |-
        Args:
            id (str): The unique identifier of the order.
        Returns:
            dict: The updated order data.
        Raises:
            HTTPException: If the JSON data is invalid.
            HTTPException: If any field other than 'userEmails' or 'deliveryAddress' is present.
            HTTPException: If neither 'userEmails' nor 'deliveryAddress' is provided.
            HTTPException: If 'userEmails' is not a list of valid email addresses.
            HTTPException: If 'deliveryAddress' is not a valid object with required fields.
            HTTPException: If the order with the given ID is not found.
      operationId: put_order_details
      parameters:
      - name: id
        in: path
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/OrderDetails'
      - name: X-Fields
        in: header
        description: An optional fields mask
        required: false
        type: string
        format: mask
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/Order'
        "404":
          description: Order not found
  /orders/{id}/status:
    put:
      tags:
      - orders
      summary: Update the status of an existing order based on the provided order ID
      description: |-
        Args:
            id (str): The unique identifier of the order.
        Returns:
            dict: The updated order data.
        Raises:
            HTTPException: If the JSON data is invalid.
            HTTPException: If the 'orderStatus' field is missing or invalid.
            HTTPException: If the order with the given ID is not found.
      operationId: put_order_status
      parameters:
      - name: id
        in: path
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/OrderStatus'
      - name: X-Fields
        in: header
        description: An optional fields mask
        required: false
        type: string
        format: mask
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/Order'
        "404":
          description: Order not found
definitions:
  Order:
    type: object
    required:
    - deliveryAddress
    - items
    - orderId
    - orderStatus
    - userEmails
    - userId
    properties:
      orderId:
        type: string
        description: The unique identifier for an order
      userId:
        type: string
        description: The unique identifier for a user
      items:
        type: array
        description: List of items in the order
        items:
          $ref: '#/definitions/Item'
      userEmails:
        type: array
        description: A list of email addresses associated with the order
        items:
          type: string
      deliveryAddress:
        $ref: '#/definitions/Order_deliveryAddress'
      orderStatus:
        type: string
        example: under process
        description: Current status of the order
        enum:
        - under process
        - shipping
        - delivered
      createdAt:
        type: string
        format: date-time
        description: Timestamp of when the order was created.
      updatedAt:
        type: string
        format: date-time
        description: Timestamp of when the order was last updated.
  Item:
    type: object
    required:
    - itemId
    - price
    - quantity
    properties:
      itemId:
        type: string
        description: The unique identifier for an item
      quantity:
        type: integer
        description: Quantity of the item ordered
        minimum: 1
      price:
        type: number
        description: Price of the item
        minimum: 0
  DeliveryAddress:
    type: object
    required:
    - city
    - country
    - postalCode
    - state
    - street
    properties:
      street:
        type: string
        description: Street address
      city:
        type: string
        description: City
      state:
        type: string
        description: State
      postalCode:
        type: string
        description: Postal code
      country:
        type: string
        description: Country
  OrderStatus:
    type: object
    required:
    - orderStatus
    properties:
      orderStatus:
        type: string
        example: under process
        description: Current status of the order
        enum:
        - under process
        - shipping
        - delivered
  OrderDetails:
    type: object
    properties:
      userEmails:
        type: array
        description: A list of email addresses associated with the order
        items:
          type: string
      deliveryAddress:
        $ref: '#/definitions/Order_deliveryAddress'
  Order_deliveryAddress:
    type: object
    description: The delivery address of the user
responses:
  ParseError:
    description: When a mask can't be parsed
  MaskError:
    description: When any error occurs on mask
